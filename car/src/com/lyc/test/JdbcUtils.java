package com.lyc.test;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//import domain.CarInfo;

public class JdbcUtils 
{

	//定义数据库的用户名
	private final String USERNAME = "daaouser";
	//定义数据库的密码
	private final String PASSWORD = "123";
	//定义数据库的驱动信息
	private final String DRIVER = "org.postgresql.Driver";
	//定义数据库的访问地址
	private final String URL = "jdbc:postgresql://localhost:5432/test";
	//定义数据库的链接
	private Connection connection;
	//定义sql语句的执行对象
	private PreparedStatement pstmt;
	//定义查询返回的结果集合
	private ResultSet resultSet;
	
	public JdbcUtils() 
	{
		// 
		try
		{
//			Class.forName(DRIVER);
//			System.out.println("注册驱动成功！！");
		}
		catch(Exception e)
		{
			//TODO:handle exception
		    System.out.println("注册驱动失败！！");
		}

	}
	//定义获得数据库的链接
	public Connection getConnection()
	{
		try{
			connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);
		}catch(Exception e){
			//TODO:handle exception
			e.printStackTrace();
			}
		return connection;
	}
	/**
	 * 完成对数据库的表的添加、删除和修改的操作
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	
	public boolean updateByPreparedStatement(String sql, List<Object>params) throws SQLException
	{
		boolean flag = false;
		int result = -1; //当用户执行添加、修改、删除操作的时候所影响数据库的行数
		pstmt = connection.prepareStatement(sql);
		int index = 1; //表示占位符的第一个位置
		if(params != null && !params.isEmpty())
		{
			for(int i=0;i<params.size();i++)
			{
				pstmt.setObject(index++, params.get(i));
			}
		}
		result = pstmt.executeUpdate();
		flag = result > 0 ? true : false;//result大于0的情况下为true,否则为false
		return flag;		
	}
	
	/**
	 * 
	 * 查询返回单条记录
	 * 
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public Map<String, Object> findSimpleResult(String sql, List<Object>params) 
			throws SQLException{
		
		Map<String, Object> map = new HashMap<String,Object>();
		int index = 1;
		
		pstmt = connection.prepareStatement(sql);
		if(params != null && !params.isEmpty()){
			for(int i = 0; i<params.size(); i++){
				pstmt.setObject(index, params.get(i));
			}
		}
		resultSet = pstmt.executeQuery();//返回查询结果
		ResultSetMetaData metaData = resultSet.getMetaData();
		int col_len = metaData.getColumnCount();//获得列的长度
		while(resultSet.next()){
			for(int i=0;i<col_len;i++){
				String cols_name = metaData.getColumnName(i+1);//获得当前列的名称
				Object cols_value = resultSet.getObject(cols_name);
				if(cols_value == null){
					cols_value = "";
				}
				map.put(cols_name, cols_value);
			}
		}
		return map;		
	}
	
	/**
	 * 
	 * 查询返回多行记录
	 * 
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public List<Map<String,Object>> findMoreResult(String sql,
			List<Object>params) throws SQLException {
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		int index = 1;
		pstmt = connection.prepareStatement(sql);
		if(params != null && !params.isEmpty()){
			for(int i = 0; i<params.size(); i++){
				pstmt.setObject(index++, params.get(i));
			}
		}
		resultSet = pstmt.executeQuery(); //返回查询结果
		ResultSetMetaData metaData = resultSet.getMetaData();
		int cols_len = metaData.getColumnCount();//获得列长度
		while (resultSet.next()) {
			Map<String,Object> map = new HashMap<String, Object>();
			for(int i=0;i<cols_len;i++){
				String cols_name = metaData.getColumnName(i+1);
				Object cols_value = resultSet.getObject(cols_name);
				if(cols_value == null){
					cols_value = "";
				}
				map.put(cols_name, cols_value);
			}
			list.add(map);
		}
		return list;		
	}
	
	//jdbc的封装可以用反射机制来封装
	public <T> T findSimpleRefResult(String sql, List<Object> params, Class<T> cls) throws Exception{
		
		T resultObject = null;
		int index = 1;
		pstmt = connection.prepareStatement(sql);
		if(params != null && !params.isEmpty()){
			for(int i = 0; i<params.size(); i++){
				pstmt.setObject(index, params.get(i));
			}
		}
		resultSet = pstmt.executeQuery();
		ResultSetMetaData metaData = resultSet.getMetaData();
		int cols_len = metaData.getColumnCount();//声明长度
		while(resultSet.next()){
			//通过反射机制创建实例
			resultObject = cls.newInstance();
			for(int i=0;i<cols_len;i++){
				String cols_name = metaData.getColumnName(i+1);
				Object cols_value = resultSet.getObject(cols_name);//取出列所对应的属性
				if(cols_value == null){
					cols_value = "";
				}
				//通过列名来获取java BEAN中列的属性字段
				Field field = cls.getDeclaredField(cols_name);
				field.setAccessible(true);//打开javabean 的访问private权限
				field.set(resultObject, cols_value);
			}
		}
		return resultObject;
		
	}
	
	/**
	 * 
	 * 通过反射机制访问数据库
	 * 
	 * @param sql
	 * @param params
	 * @param cls
	 * @return
	 * @throws Exception
	 */
	public <T> List<T> findMoreRefResult(String sql, List<Object> params, 
			Class<T> cls) throws Exception {
		List<T> list = new ArrayList<T>();
		int index = 1;
		//System.out.println(connection);
		pstmt = connection.prepareStatement(sql);
		if (params != null && !params.isEmpty()) {
			for (int i=0; i<params.size(); i++) {
				pstmt.setObject(index++,  params.get(i));
			}
		}
		resultSet = pstmt.executeQuery();
		ResultSetMetaData metaData = resultSet.getMetaData();
		int cols_len = metaData.getColumnCount();
		while (resultSet.next()) {
			T resultObject = cls.newInstance();
			for (int i=0; i<cols_len; i++) {
				String cols_name = metaData.getColumnName(i+1);
				Object cols_value = resultSet.getObject(cols_name);
				if (cols_value == null) {
					cols_value = "";
				}
				Field field = cls.getDeclaredField(cols_name);
				field.setAccessible(true);
				field.set(resultObject, cols_value);
			}
			list.add(resultObject);
		}
		return list;		
	}
	
	/**
	 * 关闭数据库的链接
	 */
	public void releaseConn() {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
				//TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (pstmt != null) {
			try {
				pstmt.close();
			} catch (SQLException e) {
				//TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
				//TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
//	public void updateCarInfo(CarInfo carInfo)
//	{		
//		String sql = "update car_info set ";
//	}
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		//TODO Auto-generated method stub
		JdbcUtils jdbcUtils = new JdbcUtils();
		jdbcUtils.getConnection();
		String sql = "update car_basic_info set update_time=? where id=?";
		List<Object> params = new ArrayList<Object>();		
		
		 long currTime = System.currentTimeMillis();
	     Timestamp timeObj = new Timestamp(currTime);            //yyyy-MM-dd HH:mm:ss:mis     
	     String createTime = timeObj.toString().substring(0,19); 
	        
		params.add(Timestamp.valueOf(createTime));		
		params.add(1);
//		params.add(1);
		
		try{			 
			boolean flag = jdbcUtils.updateByPreparedStatement(sql, params);
//			System.out.println(flag);
		} catch (SQLException e) {
			e.printStackTrace();
		}		
//		String sql = "select * from car_basic_info ";		
////		List<Object> params = new ArrayList<Object>();
////		params.add(1);	
//		try {		
//			List<UserInfo> list = jdbcUtils.findMoreRefResult(sql, null, CarInfo.class);
//			System.out.println(list);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} finally {
//			jdbcUtils.releaseConn();
//		}
		
		
	}

}
